

/*
const categoryDosentExist = async (req, res, next) => {
  try {
    const numberOfRestaurantOrders = await RestaurantCategory.count({
      where: { name: req.body.name }
    })
    if (numberOfRestaurantOrders === 0) {
      return next()
    }
    return res.status(409).send('Some orders belong to this restaurant.')
  } catch (err) {
    return res.status(500).send(err.message)
  }
}
----
navigation.navigate('CreateRestaurantScreen', { refresh: true })
-----
const show = async function (req, res) {
  // Only returns PUBLIC information of restaurants
  try {
    const restaurant = await Restaurant.findByPk(req.params.restaurantId, {
      attributes: { exclude: ['userId'] },
      include: [{
        model: Product,
        as: 'products',
        include: { model: ProductCategory, as: 'productCategory' }
      },
      {
        model: RestaurantCategory,
        as: 'restaurantCategory'
      }],
      order: [[{ model: Product, as: 'products' }, 'destacado', 'DESC'],
        [{ model: Product, as: 'products' }, 'createdAt', 'DESC'],
        [{ model: Product, as: 'products' }, 'order', 'ASC']]
    }
    )
    res.json(restaurant)
  } catch (err) {
    res.status(500).send(err)
  }
}
---------
const checkOnly5DestacadosUpdate = async (req, res, next) => {
  try {
    if (req.body.destacado === true) {
      const product = await Product.findByPk(req.params.productId)
      
      const destacdos = await Product.count({ where: { destacado: true, restaurantId: product.restaurantId } })
      if (destacdos >= 5) {
        return res.status(403).send('Ya hay 5 productos destacados')
      } else {
        return next()
      }
    } else {
      return next()
    }
  } catch (err) {
    return res.status(500).send(err)
  }
}
------------------------
const economico = async function (req, res) {
  try {
    const restaurantProducts = await Product.findAll(
      { where: { restaurantId: { [Sequelize.Op.ne]: req.params.restaurantId } } })
    const allProducts = await Product.findAll(
      { where: { restaurantId: req.params.restaurantId } })
    const avgRestaurantPrice = _getAvgPriceProducts(restaurantProducts)
    const avgTotalPrice = _getAvgPriceProducts(allProducts)
    const restaurantToWorkIn = await Restaurant.findByPk(req.params.restaurantId)
    if (avgRestaurantPrice < avgTotalPrice) {
      restaurantToWorkIn.economico = false
    } else {
      restaurantToWorkIn.economico = true
    }
    const restaurant = await restaurantToWorkIn.save()
    res.json(restaurant)
  } catch (err) {
    res.status(500).send(err)
  }
}

const _getAvgPriceProducts = function (products) {
  let sum = 0
  for (let i = 0; i < products.length; i++) {
    sum += products[i].price
  }
  return sum / products.length
}
---------------------------------------
const indexOwner = async function (req, res) {
  try {
    const restaurants = await Restaurant.findAll(
      {
        attributes: { exclude: ['userId'] },
        where: { userId: req.user.id },
        include: [{
          model: RestaurantCategory,
          as: 'restaurantCategory'
        }],
        order: [['status', 'ASC']]
      })
    res.json(restaurants)
  } catch (err) {
    res.status(500).send(err)
  }
}
---------------------------

 const numberOfRestaurantOrders = await Order.count({
        where: { restaurantId: req.params.restaurantId, deliveredAt: null }
      })
---------------------------
const show = async function (req, res) {
  // Only returns PUBLIC information of restaurants
  try {
    const restaurantAux = await Restaurant.findByPk(req.params.restaurantId)
    let restaurant = null
    if (restaurantAux.orderPrice === true) {
      restaurant = await Restaurant.findByPk(req.params.restaurantId, {
        attributes: { exclude: ['userId'] },
        include: [{
          model: Product,
          as: 'products',
          include: { model: ProductCategory, as: 'productCategory' }
        },
        {
          model: RestaurantCategory,
          as: 'restaurantCategory'
        }],

        order: [[{ model: Product, as: 'products' }, 'order', 'ASC']]
      }
      )
    } else {
      restaurant = await Restaurant.findByPk(req.params.restaurantId, {
        attributes: { exclude: ['userId'] },
        include: [{
          model: Product,
          as: 'products',
          include: { model: ProductCategory, as: 'productCategory' }
        },
        {
          model: RestaurantCategory,
          as: 'restaurantCategory'
        }],

        order: [[{ model: Product, as: 'products' }, 'price', 'DESC']]
      }
      )
    }
    res.json(restaurant)
  } catch (err) {
    res.status(500).send(err)
  }
}
--------------------------
der: [
        [{ model: Product, as: 'products' }, 'createdAt', 'DESC'],
        // Using Sequelize.literal for virtual property ordering
        [sequelize.literal(products.stock > 0), 'ASC']
--------------------------



*/
















